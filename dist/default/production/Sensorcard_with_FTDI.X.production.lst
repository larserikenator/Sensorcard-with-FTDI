

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Mar 18 23:55:15 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F1454
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext1,global,class=STRCODE,delta=2
     5                           	psect	stringtext2,global,class=STRCODE,delta=2
     6                           	psect	stringtext3,global,class=STRCODE,delta=2
     7                           	psect	stringtext4,global,class=STRCODE,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    19                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	intentry,global,class=CODE,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	dabs	1,0x7E,2
    28  0000                     
    29                           ; Version 1.45
    30                           ; Generated 16/11/2017 GMT
    31                           ; 
    32                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    33                           ; All rights reserved.
    34                           ; 
    35                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    36                           ; 
    37                           ; Redistribution and use in source and binary forms, with or without modification, are
    38                           ; permitted provided that the following conditions are met:
    39                           ; 
    40                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    41                           ;        conditions and the following disclaimer.
    42                           ; 
    43                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    44                           ;        of conditions and the following disclaimer in the documentation and/or other
    45                           ;        materials provided with the distribution.
    46                           ; 
    47                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    48                           ;        software without specific prior written permission.
    49                           ; 
    50                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    51                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    52                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    53                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    54                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    55                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    56                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    57                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    58                           ; 
    59                           ; 
    60                           ; Code-generator required, PIC16F1454 Definitions
    61                           ; 
    62                           ; SFR Addresses
    63  0000                     	;# 
    64  0001                     	;# 
    65  0002                     	;# 
    66  0003                     	;# 
    67  0004                     	;# 
    68  0005                     	;# 
    69  0006                     	;# 
    70  0007                     	;# 
    71  0008                     	;# 
    72  0009                     	;# 
    73  000A                     	;# 
    74  000B                     	;# 
    75  000C                     	;# 
    76  000E                     	;# 
    77  0011                     	;# 
    78  0012                     	;# 
    79  0015                     	;# 
    80  0016                     	;# 
    81  0016                     	;# 
    82  0017                     	;# 
    83  0018                     	;# 
    84  0019                     	;# 
    85  001A                     	;# 
    86  001B                     	;# 
    87  001C                     	;# 
    88  008C                     	;# 
    89  008E                     	;# 
    90  0091                     	;# 
    91  0092                     	;# 
    92  0095                     	;# 
    93  0096                     	;# 
    94  0097                     	;# 
    95  0098                     	;# 
    96  0099                     	;# 
    97  009A                     	;# 
    98  010C                     	;# 
    99  010E                     	;# 
   100  0116                     	;# 
   101  0117                     	;# 
   102  011D                     	;# 
   103  018C                     	;# 
   104  018E                     	;# 
   105  0191                     	;# 
   106  0191                     	;# 
   107  0192                     	;# 
   108  0193                     	;# 
   109  0193                     	;# 
   110  0194                     	;# 
   111  0195                     	;# 
   112  0196                     	;# 
   113  0197                     	;# 
   114  0199                     	;# 
   115  019A                     	;# 
   116  019B                     	;# 
   117  019B                     	;# 
   118  019C                     	;# 
   119  019D                     	;# 
   120  019E                     	;# 
   121  019F                     	;# 
   122  020C                     	;# 
   123  0211                     	;# 
   124  0211                     	;# 
   125  0212                     	;# 
   126  0212                     	;# 
   127  0213                     	;# 
   128  0213                     	;# 
   129  0214                     	;# 
   130  0214                     	;# 
   131  0215                     	;# 
   132  0215                     	;# 
   133  0215                     	;# 
   134  0216                     	;# 
   135  0216                     	;# 
   136  0217                     	;# 
   137  0217                     	;# 
   138  0391                     	;# 
   139  0392                     	;# 
   140  0393                     	;# 
   141  039A                     	;# 
   142  039B                     	;# 
   143  0611                     	;# 
   144  0612                     	;# 
   145  0613                     	;# 
   146  0613                     	;# 
   147  0614                     	;# 
   148  0615                     	;# 
   149  0616                     	;# 
   150  0616                     	;# 
   151  0E8E                     	;# 
   152  0E8F                     	;# 
   153  0E90                     	;# 
   154  0E91                     	;# 
   155  0E92                     	;# 
   156  0E93                     	;# 
   157  0E94                     	;# 
   158  0E94                     	;# 
   159  0E95                     	;# 
   160  0E96                     	;# 
   161  0E97                     	;# 
   162  0E98                     	;# 
   163  0E99                     	;# 
   164  0E9A                     	;# 
   165  0E9B                     	;# 
   166  0E9C                     	;# 
   167  0E9D                     	;# 
   168  0E9E                     	;# 
   169  0E9F                     	;# 
   170  0FE4                     	;# 
   171  0FE5                     	;# 
   172  0FE6                     	;# 
   173  0FE7                     	;# 
   174  0FE8                     	;# 
   175  0FE9                     	;# 
   176  0FEA                     	;# 
   177  0FEB                     	;# 
   178  0FED                     	;# 
   179  0FEE                     	;# 
   180  0FEF                     	;# 
   181  0000                     	;# 
   182  0001                     	;# 
   183  0002                     	;# 
   184  0003                     	;# 
   185  0004                     	;# 
   186  0005                     	;# 
   187  0006                     	;# 
   188  0007                     	;# 
   189  0008                     	;# 
   190  0009                     	;# 
   191  000A                     	;# 
   192  000B                     	;# 
   193  000C                     	;# 
   194  000E                     	;# 
   195  0011                     	;# 
   196  0012                     	;# 
   197  0015                     	;# 
   198  0016                     	;# 
   199  0016                     	;# 
   200  0017                     	;# 
   201  0018                     	;# 
   202  0019                     	;# 
   203  001A                     	;# 
   204  001B                     	;# 
   205  001C                     	;# 
   206  008C                     	;# 
   207  008E                     	;# 
   208  0091                     	;# 
   209  0092                     	;# 
   210  0095                     	;# 
   211  0096                     	;# 
   212  0097                     	;# 
   213  0098                     	;# 
   214  0099                     	;# 
   215  009A                     	;# 
   216  010C                     	;# 
   217  010E                     	;# 
   218  0116                     	;# 
   219  0117                     	;# 
   220  011D                     	;# 
   221  018C                     	;# 
   222  018E                     	;# 
   223  0191                     	;# 
   224  0191                     	;# 
   225  0192                     	;# 
   226  0193                     	;# 
   227  0193                     	;# 
   228  0194                     	;# 
   229  0195                     	;# 
   230  0196                     	;# 
   231  0197                     	;# 
   232  0199                     	;# 
   233  019A                     	;# 
   234  019B                     	;# 
   235  019B                     	;# 
   236  019C                     	;# 
   237  019D                     	;# 
   238  019E                     	;# 
   239  019F                     	;# 
   240  020C                     	;# 
   241  0211                     	;# 
   242  0211                     	;# 
   243  0212                     	;# 
   244  0212                     	;# 
   245  0213                     	;# 
   246  0213                     	;# 
   247  0214                     	;# 
   248  0214                     	;# 
   249  0215                     	;# 
   250  0215                     	;# 
   251  0215                     	;# 
   252  0216                     	;# 
   253  0216                     	;# 
   254  0217                     	;# 
   255  0217                     	;# 
   256  0391                     	;# 
   257  0392                     	;# 
   258  0393                     	;# 
   259  039A                     	;# 
   260  039B                     	;# 
   261  0611                     	;# 
   262  0612                     	;# 
   263  0613                     	;# 
   264  0613                     	;# 
   265  0614                     	;# 
   266  0615                     	;# 
   267  0616                     	;# 
   268  0616                     	;# 
   269  0E8E                     	;# 
   270  0E8F                     	;# 
   271  0E90                     	;# 
   272  0E91                     	;# 
   273  0E92                     	;# 
   274  0E93                     	;# 
   275  0E94                     	;# 
   276  0E94                     	;# 
   277  0E95                     	;# 
   278  0E96                     	;# 
   279  0E97                     	;# 
   280  0E98                     	;# 
   281  0E99                     	;# 
   282  0E9A                     	;# 
   283  0E9B                     	;# 
   284  0E9C                     	;# 
   285  0E9D                     	;# 
   286  0E9E                     	;# 
   287  0E9F                     	;# 
   288  0FE4                     	;# 
   289  0FE5                     	;# 
   290  0FE6                     	;# 
   291  0FE7                     	;# 
   292  0FE8                     	;# 
   293  0FE9                     	;# 
   294  0FEA                     	;# 
   295  0FEB                     	;# 
   296  0FED                     	;# 
   297  0FEE                     	;# 
   298  0FEF                     	;# 
   299  0000                     	;# 
   300  0001                     	;# 
   301  0002                     	;# 
   302  0003                     	;# 
   303  0004                     	;# 
   304  0005                     	;# 
   305  0006                     	;# 
   306  0007                     	;# 
   307  0008                     	;# 
   308  0009                     	;# 
   309  000A                     	;# 
   310  000B                     	;# 
   311  000C                     	;# 
   312  000E                     	;# 
   313  0011                     	;# 
   314  0012                     	;# 
   315  0015                     	;# 
   316  0016                     	;# 
   317  0016                     	;# 
   318  0017                     	;# 
   319  0018                     	;# 
   320  0019                     	;# 
   321  001A                     	;# 
   322  001B                     	;# 
   323  001C                     	;# 
   324  008C                     	;# 
   325  008E                     	;# 
   326  0091                     	;# 
   327  0092                     	;# 
   328  0095                     	;# 
   329  0096                     	;# 
   330  0097                     	;# 
   331  0098                     	;# 
   332  0099                     	;# 
   333  009A                     	;# 
   334  010C                     	;# 
   335  010E                     	;# 
   336  0116                     	;# 
   337  0117                     	;# 
   338  011D                     	;# 
   339  018C                     	;# 
   340  018E                     	;# 
   341  0191                     	;# 
   342  0191                     	;# 
   343  0192                     	;# 
   344  0193                     	;# 
   345  0193                     	;# 
   346  0194                     	;# 
   347  0195                     	;# 
   348  0196                     	;# 
   349  0197                     	;# 
   350  0199                     	;# 
   351  019A                     	;# 
   352  019B                     	;# 
   353  019B                     	;# 
   354  019C                     	;# 
   355  019D                     	;# 
   356  019E                     	;# 
   357  019F                     	;# 
   358  020C                     	;# 
   359  0211                     	;# 
   360  0211                     	;# 
   361  0212                     	;# 
   362  0212                     	;# 
   363  0213                     	;# 
   364  0213                     	;# 
   365  0214                     	;# 
   366  0214                     	;# 
   367  0215                     	;# 
   368  0215                     	;# 
   369  0215                     	;# 
   370  0216                     	;# 
   371  0216                     	;# 
   372  0217                     	;# 
   373  0217                     	;# 
   374  0391                     	;# 
   375  0392                     	;# 
   376  0393                     	;# 
   377  039A                     	;# 
   378  039B                     	;# 
   379  0611                     	;# 
   380  0612                     	;# 
   381  0613                     	;# 
   382  0613                     	;# 
   383  0614                     	;# 
   384  0615                     	;# 
   385  0616                     	;# 
   386  0616                     	;# 
   387  0E8E                     	;# 
   388  0E8F                     	;# 
   389  0E90                     	;# 
   390  0E91                     	;# 
   391  0E92                     	;# 
   392  0E93                     	;# 
   393  0E94                     	;# 
   394  0E94                     	;# 
   395  0E95                     	;# 
   396  0E96                     	;# 
   397  0E97                     	;# 
   398  0E98                     	;# 
   399  0E99                     	;# 
   400  0E9A                     	;# 
   401  0E9B                     	;# 
   402  0E9C                     	;# 
   403  0E9D                     	;# 
   404  0E9E                     	;# 
   405  0E9F                     	;# 
   406  0FE4                     	;# 
   407  0FE5                     	;# 
   408  0FE6                     	;# 
   409  0FE7                     	;# 
   410  0FE8                     	;# 
   411  0FE9                     	;# 
   412  0FEA                     	;# 
   413  0FEB                     	;# 
   414  0FED                     	;# 
   415  0FEE                     	;# 
   416  0FEF                     	;# 
   417  0000                     	;# 
   418  0001                     	;# 
   419  0002                     	;# 
   420  0003                     	;# 
   421  0004                     	;# 
   422  0005                     	;# 
   423  0006                     	;# 
   424  0007                     	;# 
   425  0008                     	;# 
   426  0009                     	;# 
   427  000A                     	;# 
   428  000B                     	;# 
   429  000C                     	;# 
   430  000E                     	;# 
   431  0011                     	;# 
   432  0012                     	;# 
   433  0015                     	;# 
   434  0016                     	;# 
   435  0016                     	;# 
   436  0017                     	;# 
   437  0018                     	;# 
   438  0019                     	;# 
   439  001A                     	;# 
   440  001B                     	;# 
   441  001C                     	;# 
   442  008C                     	;# 
   443  008E                     	;# 
   444  0091                     	;# 
   445  0092                     	;# 
   446  0095                     	;# 
   447  0096                     	;# 
   448  0097                     	;# 
   449  0098                     	;# 
   450  0099                     	;# 
   451  009A                     	;# 
   452  010C                     	;# 
   453  010E                     	;# 
   454  0116                     	;# 
   455  0117                     	;# 
   456  011D                     	;# 
   457  018C                     	;# 
   458  018E                     	;# 
   459  0191                     	;# 
   460  0191                     	;# 
   461  0192                     	;# 
   462  0193                     	;# 
   463  0193                     	;# 
   464  0194                     	;# 
   465  0195                     	;# 
   466  0196                     	;# 
   467  0197                     	;# 
   468  0199                     	;# 
   469  019A                     	;# 
   470  019B                     	;# 
   471  019B                     	;# 
   472  019C                     	;# 
   473  019D                     	;# 
   474  019E                     	;# 
   475  019F                     	;# 
   476  020C                     	;# 
   477  0211                     	;# 
   478  0211                     	;# 
   479  0212                     	;# 
   480  0212                     	;# 
   481  0213                     	;# 
   482  0213                     	;# 
   483  0214                     	;# 
   484  0214                     	;# 
   485  0215                     	;# 
   486  0215                     	;# 
   487  0215                     	;# 
   488  0216                     	;# 
   489  0216                     	;# 
   490  0217                     	;# 
   491  0217                     	;# 
   492  0391                     	;# 
   493  0392                     	;# 
   494  0393                     	;# 
   495  039A                     	;# 
   496  039B                     	;# 
   497  0611                     	;# 
   498  0612                     	;# 
   499  0613                     	;# 
   500  0613                     	;# 
   501  0614                     	;# 
   502  0615                     	;# 
   503  0616                     	;# 
   504  0616                     	;# 
   505  0E8E                     	;# 
   506  0E8F                     	;# 
   507  0E90                     	;# 
   508  0E91                     	;# 
   509  0E92                     	;# 
   510  0E93                     	;# 
   511  0E94                     	;# 
   512  0E94                     	;# 
   513  0E95                     	;# 
   514  0E96                     	;# 
   515  0E97                     	;# 
   516  0E98                     	;# 
   517  0E99                     	;# 
   518  0E9A                     	;# 
   519  0E9B                     	;# 
   520  0E9C                     	;# 
   521  0E9D                     	;# 
   522  0E9E                     	;# 
   523  0E9F                     	;# 
   524  0FE4                     	;# 
   525  0FE5                     	;# 
   526  0FE6                     	;# 
   527  0FE7                     	;# 
   528  0FE8                     	;# 
   529  0FE9                     	;# 
   530  0FEA                     	;# 
   531  0FEB                     	;# 
   532  0FED                     	;# 
   533  0FEE                     	;# 
   534  0FEF                     	;# 
   535  0000                     	;# 
   536  0001                     	;# 
   537  0002                     	;# 
   538  0003                     	;# 
   539  0004                     	;# 
   540  0005                     	;# 
   541  0006                     	;# 
   542  0007                     	;# 
   543  0008                     	;# 
   544  0009                     	;# 
   545  000A                     	;# 
   546  000B                     	;# 
   547  000C                     	;# 
   548  000E                     	;# 
   549  0011                     	;# 
   550  0012                     	;# 
   551  0015                     	;# 
   552  0016                     	;# 
   553  0016                     	;# 
   554  0017                     	;# 
   555  0018                     	;# 
   556  0019                     	;# 
   557  001A                     	;# 
   558  001B                     	;# 
   559  001C                     	;# 
   560  008C                     	;# 
   561  008E                     	;# 
   562  0091                     	;# 
   563  0092                     	;# 
   564  0095                     	;# 
   565  0096                     	;# 
   566  0097                     	;# 
   567  0098                     	;# 
   568  0099                     	;# 
   569  009A                     	;# 
   570  010C                     	;# 
   571  010E                     	;# 
   572  0116                     	;# 
   573  0117                     	;# 
   574  011D                     	;# 
   575  018C                     	;# 
   576  018E                     	;# 
   577  0191                     	;# 
   578  0191                     	;# 
   579  0192                     	;# 
   580  0193                     	;# 
   581  0193                     	;# 
   582  0194                     	;# 
   583  0195                     	;# 
   584  0196                     	;# 
   585  0197                     	;# 
   586  0199                     	;# 
   587  019A                     	;# 
   588  019B                     	;# 
   589  019B                     	;# 
   590  019C                     	;# 
   591  019D                     	;# 
   592  019E                     	;# 
   593  019F                     	;# 
   594  020C                     	;# 
   595  0211                     	;# 
   596  0211                     	;# 
   597  0212                     	;# 
   598  0212                     	;# 
   599  0213                     	;# 
   600  0213                     	;# 
   601  0214                     	;# 
   602  0214                     	;# 
   603  0215                     	;# 
   604  0215                     	;# 
   605  0215                     	;# 
   606  0216                     	;# 
   607  0216                     	;# 
   608  0217                     	;# 
   609  0217                     	;# 
   610  0391                     	;# 
   611  0392                     	;# 
   612  0393                     	;# 
   613  039A                     	;# 
   614  039B                     	;# 
   615  0611                     	;# 
   616  0612                     	;# 
   617  0613                     	;# 
   618  0613                     	;# 
   619  0614                     	;# 
   620  0615                     	;# 
   621  0616                     	;# 
   622  0616                     	;# 
   623  0E8E                     	;# 
   624  0E8F                     	;# 
   625  0E90                     	;# 
   626  0E91                     	;# 
   627  0E92                     	;# 
   628  0E93                     	;# 
   629  0E94                     	;# 
   630  0E94                     	;# 
   631  0E95                     	;# 
   632  0E96                     	;# 
   633  0E97                     	;# 
   634  0E98                     	;# 
   635  0E99                     	;# 
   636  0E9A                     	;# 
   637  0E9B                     	;# 
   638  0E9C                     	;# 
   639  0E9D                     	;# 
   640  0E9E                     	;# 
   641  0E9F                     	;# 
   642  0FE4                     	;# 
   643  0FE5                     	;# 
   644  0FE6                     	;# 
   645  0FE7                     	;# 
   646  0FE8                     	;# 
   647  0FE9                     	;# 
   648  0FEA                     	;# 
   649  0FEB                     	;# 
   650  0FED                     	;# 
   651  0FEE                     	;# 
   652  0FEF                     	;# 
   653                           
   654                           	psect	stringtext1
   655  017C                     __pstringtext1:	
   656  017C                     _dpowers:	
   657  017C  3401               	retlw	1
   658  017D  3400               	retlw	0
   659  017E  340A               	retlw	10
   660  017F  3400               	retlw	0
   661  0180  3464               	retlw	100
   662  0181  3400               	retlw	0
   663  0182  34E8               	retlw	232
   664  0183  3403               	retlw	3
   665  0184  3410               	retlw	16
   666  0185  3427               	retlw	39
   667  0186                     __end_of_dpowers:	
   668  000B                     _INTCONbits	set	11
   669  0011                     _PIR1bits	set	17
   670  0097                     _WDTCON	set	151
   671  0098                     _OSCTUNE	set	152
   672  0099                     _OSCCON	set	153
   673  0091                     _PIE1bits	set	145
   674  0095                     _OPTION_REGbits	set	149
   675  008E                     _TRISC	set	142
   676  008C                     _TRISA	set	140
   677  04D6                     _PLLRDY	set	1238
   678  0116                     _BORCON	set	278
   679  011D                     _APFCON	set	285
   680  010E                     _LATC	set	270
   681  010C                     _LATA	set	268
   682  0199                     _RCREG	set	409
   683  019D                     _RCSTAbits	set	413
   684  019A                     _TXREG	set	410
   685  019C                     _SPBRGH	set	412
   686  019B                     _SPBRGL	set	411
   687  019E                     _TXSTA	set	414
   688  019D                     _RCSTA	set	413
   689  019F                     _BAUDCON	set	415
   690  018C                     _ANSELA	set	396
   691  018E                     _ANSELC	set	398
   692  020C                     _WPUA	set	524
   693  039B                     _ACTCON	set	923
   694  0186                     STR_1:	
   695  0186  3454               	retlw	84	;'T'
   696  0187  3465               	retlw	101	;'e'
   697  0188  3478               	retlw	120	;'x'
   698  0189  3474               	retlw	116	;'t'
   699  018A  3420               	retlw	32	;' '
   700  018B  3425               	retlw	37	;'%'
   701  018C  3473               	retlw	115	;'s'
   702  018D  342C               	retlw	44	;','
   703  018E  3420               	retlw	32	;' '
   704  018F  3463               	retlw	99	;'c'
   705  0190  346F               	retlw	111	;'o'
   706  0191  3475               	retlw	117	;'u'
   707  0192  346E               	retlw	110	;'n'
   708  0193  3474               	retlw	116	;'t'
   709  0194  343A               	retlw	58	;':'
   710  0195  3420               	retlw	32	;' '
   711  0196  3425               	retlw	37	;'%'
   712  0197  3475               	retlw	117	;'u'
   713  0198  340D               	retlw	13
   714  0199  346C               	retlw	108	;'l'
   715  019A  3400               	retlw	0
   716                           
   717                           	psect	stringtext2
   718  01FD                     __pstringtext2:	
   719  01FD                     STR_3:	
   720  01FD  3428               	retlw	40	;'('
   721  01FE  346E               	retlw	110	;'n'
   722  01FF  3475               	retlw	117	;'u'
   723  0200  346C               	retlw	108	;'l'
   724  0201  346C               	retlw	108	;'l'
   725  0202  3429               	retlw	41	;')'
   726  0203  3400               	retlw	0
   727                           
   728                           	psect	stringtext3
   729  0213                     __pstringtext3:	
   730  0213                     STR_2:	
   731  0213  3425               	retlw	37	;'%'
   732  0214  3475               	retlw	117	;'u'
   733  0215  3400               	retlw	0
   734                           
   735                           	psect	stringtext4
   736  0000                     __pstringtext4:	
   737                           
   738                           ; #config settings
   739  0000                     
   740                           	psect	cinit
   741  001A                     start_initialization:	
   742  001A                     __initialization:	
   743                           
   744                           ; Clear objects allocated to COMMON
   745  001A  01FA               	clrf	__pbssCOMMON& (0+127)
   746  001B  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
   747                           
   748                           ; Clear objects allocated to BANK0
   749  001C  3039               	movlw	low __pbssBANK0
   750  001D  0084               	movwf	4
   751  001E  3000               	movlw	high __pbssBANK0
   752  001F  0085               	movwf	5
   753  0020  3011               	movlw	17
   754  0021  3182  2204         	fcall	clear_ram0
   755  0023                     end_of_initialization:	
   756                           ;End of C runtime variable initialization code
   757                           
   758  0023                     __end_of__initialization:	
   759  0023  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
   760  0024  0020               	movlb	0
   761  0025  3181  295A         	ljmp	_main	;jump to C main() function
   762                           
   763                           	psect	bssCOMMON
   764  007A                     __pbssCOMMON:	
   765  007A                     _eusartRxTail:	
   766  007A                     	ds	1
   767  007B                     _eusartRxHead:	
   768  007B                     	ds	1
   769                           
   770                           	psect	bssBANK0
   771  0039                     __pbssBANK0:	
   772  0039                     _eusartRxBuffer:	
   773  0039                     	ds	16
   774  0049                     _eusartRxCount:	
   775  0049                     	ds	1
   776                           
   777                           	psect	clrtext
   778  0204                     clear_ram0:	
   779                           ;	Called with FSR0 containing the base address, and
   780                           ;	WREG with the size to clear
   781                           
   782  0204  0064               	clrwdt	;clear the watchdog before getting into this loop
   783  0205                     clrloop0:	
   784  0205  0180               	clrf	0	;clear RAM location pointed to by FSR
   785  0206  3101               	addfsr 0,1
   786  0207  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   787  0208  2A05               	goto	clrloop0	;have we reached the end yet?
   788  0209  3400               	retlw	0	;all done for this memory range, return
   789                           
   790                           	psect	cstackCOMMON
   791  0070                     __pcstackCOMMON:	
   792  0070                     ?_OSCILLATOR_Initialize:	
   793  0070                     ?_WDT_Initialize:	
   794                           ; 1 bytes @ 0x0
   795                           
   796  0070                     ?_PIN_MANAGER_Initialize:	
   797                           ; 1 bytes @ 0x0
   798                           
   799  0070                     ?_EUSART_Initialize:	
   800                           ; 1 bytes @ 0x0
   801                           
   802  0070                     ?_EUSART_Write:	
   803                           ; 1 bytes @ 0x0
   804                           
   805  0070                     ?_putch:	
   806                           ; 1 bytes @ 0x0
   807                           
   808  0070                     ?_EUSART_Receive_ISR:	
   809                           ; 1 bytes @ 0x0
   810                           
   811  0070                     ??_EUSART_Receive_ISR:	
   812                           ; 1 bytes @ 0x0
   813                           
   814  0070                     ?_SYSTEM_Initialize:	
   815                           ; 1 bytes @ 0x0
   816                           
   817  0070                     ?_main:	
   818                           ; 1 bytes @ 0x0
   819                           
   820  0070                     ?_INTERRUPT_InterruptManager:	
   821                           ; 1 bytes @ 0x0
   822                           
   823                           
   824                           ; 1 bytes @ 0x0
   825  0070                     	ds	1
   826  0071                     ??_INTERRUPT_InterruptManager:	
   827                           
   828                           ; 1 bytes @ 0x1
   829  0071                     	ds	1
   830  0072                     ??_OSCILLATOR_Initialize:	
   831  0072                     ??_WDT_Initialize:	
   832                           ; 1 bytes @ 0x2
   833                           
   834  0072                     ??_PIN_MANAGER_Initialize:	
   835                           ; 1 bytes @ 0x2
   836                           
   837  0072                     ??_EUSART_Initialize:	
   838                           ; 1 bytes @ 0x2
   839                           
   840  0072                     ??_EUSART_Write:	
   841                           ; 1 bytes @ 0x2
   842                           
   843  0072                     ??_SYSTEM_Initialize:	
   844                           ; 1 bytes @ 0x2
   845                           
   846  0072                     ?___lwdiv:	
   847                           ; 1 bytes @ 0x2
   848                           
   849  0072                     EUSART_Write@txData:	
   850                           ; 2 bytes @ 0x2
   851                           
   852  0072                     ___lwdiv@divisor:	
   853                           ; 1 bytes @ 0x2
   854                           
   855                           
   856                           ; 2 bytes @ 0x2
   857  0072                     	ds	1
   858  0073                     ??_putch:	
   859  0073                     putch@txData:	
   860                           ; 1 bytes @ 0x3
   861                           
   862                           
   863                           ; 1 bytes @ 0x3
   864  0073                     	ds	1
   865  0074                     ___lwdiv@dividend:	
   866                           
   867                           ; 2 bytes @ 0x4
   868  0074                     	ds	2
   869  0076                     ??___lwdiv:	
   870                           
   871                           ; 1 bytes @ 0x6
   872  0076                     	ds	1
   873  0077                     ___lwdiv@quotient:	
   874                           
   875                           ; 2 bytes @ 0x7
   876  0077                     	ds	2
   877  0079                     ___lwdiv@counter:	
   878                           
   879                           ; 1 bytes @ 0x9
   880  0079                     	ds	1
   881                           
   882                           	psect	cstackBANK0
   883  0020                     __pcstackBANK0:	
   884  0020                     ?___lwmod:	
   885  0020                     ___lwmod@divisor:	
   886                           ; 2 bytes @ 0x0
   887                           
   888                           
   889                           ; 2 bytes @ 0x0
   890  0020                     	ds	2
   891  0022                     ___lwmod@dividend:	
   892                           
   893                           ; 2 bytes @ 0x2
   894  0022                     	ds	2
   895  0024                     ??___lwmod:	
   896                           
   897                           ; 1 bytes @ 0x4
   898  0024                     	ds	1
   899  0025                     ___lwmod@counter:	
   900                           
   901                           ; 1 bytes @ 0x5
   902  0025                     	ds	1
   903  0026                     ?_printf:	
   904  0026                     printf@f:	
   905                           ; 2 bytes @ 0x6
   906                           
   907                           
   908                           ; 2 bytes @ 0x6
   909  0026                     	ds	5
   910  002B                     ??_printf:	
   911                           
   912                           ; 1 bytes @ 0xB
   913  002B                     	ds	4
   914  002F                     printf@flag:	
   915                           
   916                           ; 1 bytes @ 0xF
   917  002F                     	ds	1
   918  0030                     printf@val:	
   919                           
   920                           ; 2 bytes @ 0x10
   921  0030                     	ds	2
   922  0032                     printf@prec:	
   923                           
   924                           ; 1 bytes @ 0x12
   925  0032                     	ds	1
   926  0033                     printf@ap:	
   927                           
   928                           ; 1 bytes @ 0x13
   929  0033                     	ds	1
   930  0034                     printf@cp:	
   931                           
   932                           ; 2 bytes @ 0x14
   933  0034                     	ds	2
   934  0036                     printf@c:	
   935                           
   936                           ; 1 bytes @ 0x16
   937  0036                     	ds	1
   938  0037                     ??_main:	
   939                           
   940                           ; 1 bytes @ 0x17
   941  0037                     	ds	2
   942                           
   943                           	psect	maintext
   944  015A                     __pmaintext:	
   945 ;;
   946 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   947 ;;
   948 ;; *************** function _main *****************
   949 ;; Defined at:
   950 ;;		line 59 in file "main.c"
   951 ;; Parameters:    Size  Location     Type
   952 ;;		None
   953 ;; Auto vars:     Size  Location     Type
   954 ;;  buffer         16    0        unsigned char [16]
   955 ;; Return value:  Size  Location     Type
   956 ;;                  1    wreg      void 
   957 ;; Registers used:
   958 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   959 ;; Tracked objects:
   960 ;;		On entry : B1F/0
   961 ;;		On exit  : 0/0
   962 ;;		Unchanged: 0/0
   963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   964 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   965 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   966 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
   967 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
   968 ;;Total ram usage:        2 bytes
   969 ;; Hardware stack levels required when called:    5
   970 ;; This function calls:
   971 ;;		_SYSTEM_Initialize
   972 ;;		_printf
   973 ;; This function is called by:
   974 ;;		Startup code after reset
   975 ;; This function uses a non-reentrant model
   976 ;;
   977                           
   978                           
   979                           ;psect for function _main
   980  015A                     _main:	
   981                           
   982                           ;main.c: 62: SYSTEM_Initialize();
   983                           
   984                           ;incstack = 0
   985                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   986  015A  3181  21DD  3181   	fcall	_SYSTEM_Initialize
   987                           
   988                           ;main.c: 68: (INTCONbits.GIE = 1);
   989  015D  178B               	bsf	11,7	;volatile
   990                           
   991                           ;main.c: 71: (INTCONbits.PEIE = 1);
   992  015E  170B               	bsf	11,6	;volatile
   993  015F                     l1099:	
   994                           ;main.c: 78: char buffer[16];
   995                           ;main.c: 79: while (1)
   996                           
   997                           
   998                           ;main.c: 80: {
   999                           ;main.c: 83: printf("%u", eusartRxCount);
  1000  015F  3013               	movlw	low (STR_2| (0+32768))
  1001  0160  0020               	movlb	0	; select bank0
  1002  0161  00A6               	movwf	printf@f
  1003  0162  3082               	movlw	high (STR_2| (0+32768))
  1004  0163  00A7               	movwf	printf@f+1
  1005  0164  0849               	movf	_eusartRxCount,w	;volatile
  1006  0165  00B7               	movwf	??_main
  1007  0166  01B8               	clrf	??_main+1
  1008  0167  0837               	movf	??_main,w
  1009  0168  00A8               	movwf	?_printf+2
  1010  0169  0838               	movf	??_main+1,w
  1011  016A  00A9               	movwf	?_printf+3
  1012  016B  3180  2027  3181   	fcall	_printf
  1013                           
  1014                           ;main.c: 84: _delay((unsigned long)((1000)*(8000000/4000.0)));
  1015  016E  300B               	movlw	11
  1016  016F  0020               	movlb	0	; select bank0
  1017  0170  00B8               	movwf	??_main+1
  1018  0171  3026               	movlw	38
  1019  0172  00B7               	movwf	??_main
  1020  0173  305D               	movlw	93
  1021  0174                     u817:	
  1022  0174  0B89               	decfsz	9,f
  1023  0175  2974               	goto	u817
  1024  0176  0BB7               	decfsz	??_main,f
  1025  0177  2974               	goto	u817
  1026  0178  0BB8               	decfsz	??_main+1,f
  1027  0179  2974               	goto	u817
  1028  017A  3200               	nop2
  1029  017B  295F               	goto	l1099
  1030  017C                     __end_of_main:	
  1031                           
  1032                           	psect	text1
  1033  0027                     __ptext1:	
  1034 ;; *************** function _printf *****************
  1035 ;; Defined at:
  1036 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  1037 ;; Parameters:    Size  Location     Type
  1038 ;;  f               2    6[BANK0 ] PTR const unsigned char 
  1039 ;;		 -> STR_2(3), STR_1(21), 
  1040 ;; Auto vars:     Size  Location     Type
  1041 ;;  tmpval          4    0        struct .
  1042 ;;  cp              2   20[BANK0 ] PTR const unsigned char 
  1043 ;;		 -> STR_3(7), 
  1044 ;;  val             2   16[BANK0 ] unsigned int 
  1045 ;;  len             2    0        unsigned int 
  1046 ;;  c               1   22[BANK0 ] char 
  1047 ;;  ap              1   19[BANK0 ] PTR void [1]
  1048 ;;		 -> ?_printf(2), 
  1049 ;;  prec            1   18[BANK0 ] char 
  1050 ;;  flag            1   15[BANK0 ] unsigned char 
  1051 ;; Return value:  Size  Location     Type
  1052 ;;                  2    6[BANK0 ] int 
  1053 ;; Registers used:
  1054 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1055 ;; Tracked objects:
  1056 ;;		On entry : 0/0
  1057 ;;		On exit  : 0/0
  1058 ;;		Unchanged: 0/0
  1059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1060 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1061 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1062 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1063 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1064 ;;Total ram usage:       17 bytes
  1065 ;; Hardware stack levels used:    1
  1066 ;; Hardware stack levels required when called:    4
  1067 ;; This function calls:
  1068 ;;		___lwdiv
  1069 ;;		___lwmod
  1070 ;;		_putch
  1071 ;; This function is called by:
  1072 ;;		_main
  1073 ;;		_readUserInput
  1074 ;; This function uses a non-reentrant model
  1075 ;;
  1076                           
  1077                           
  1078                           ;psect for function _printf
  1079  0027                     _printf:	
  1080                           
  1081                           ;doprnt.c: 466: va_list ap;
  1082                           ;doprnt.c: 499: signed char c;
  1083                           ;doprnt.c: 506: signed char prec;
  1084                           ;doprnt.c: 508: unsigned char flag;
  1085                           ;doprnt.c: 523: union {
  1086                           ;doprnt.c: 524: unsigned long vd;
  1087                           ;doprnt.c: 525: double integ;
  1088                           ;doprnt.c: 526: } tmpval;
  1089                           ;doprnt.c: 528: unsigned int val;
  1090                           ;doprnt.c: 529: unsigned len;
  1091                           ;doprnt.c: 530: const char * cp;
  1092                           ;doprnt.c: 533: *ap = __va_start();
  1093                           
  1094                           ;incstack = 0
  1095                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1096  0027  3028               	movlw	(low ((?_printf| 0+2)))& (0+255)
  1097  0028  0020               	movlb	0	; select bank0
  1098  0029  00AB               	movwf	??_printf
  1099  002A  082B               	movf	??_printf,w
  1100  002B  00B3               	movwf	printf@ap
  1101  002C                     l1077:	
  1102                           ;doprnt.c: 536: while(c = *f++) {
  1103                           
  1104  002C  0020               	movlb	0	; select bank0
  1105  002D  0827               	movf	printf@f+1,w
  1106  002E  00AC               	movwf	??_printf+1
  1107  002F  0826               	movf	printf@f,w
  1108  0030  00AB               	movwf	??_printf
  1109  0031  0AA6               	incf	printf@f,f
  1110  0032  1903               	skipnz
  1111  0033  0AA7               	incf	printf@f+1,f
  1112  0034  082B               	movf	??_printf,w
  1113  0035  0084               	movwf	4
  1114  0036  082C               	movf	??_printf+1,w
  1115  0037  0085               	movwf	5
  1116  0038  0800               	movf	0,w	;code access
  1117  0039  00AD               	movwf	??_printf+2
  1118  003A  082D               	movf	??_printf+2,w
  1119  003B  00B6               	movwf	printf@c
  1120  003C  0836               	movf	printf@c,w
  1121  003D  1903               	btfsc	3,2
  1122  003E  0008               	return
  1123                           
  1124                           ;doprnt.c: 538: if(c != '%')
  1125  003F  3025               	movlw	37
  1126  0040  0636               	xorwf	printf@c,w
  1127  0041  1903               	btfsc	3,2
  1128  0042  2848               	goto	l1031
  1129                           
  1130                           ;doprnt.c: 540: {
  1131                           ;doprnt.c: 541: (putch(c) );
  1132  0043  0836               	movf	printf@c,w
  1133  0044  3182  220A  3180   	fcall	_putch
  1134                           
  1135                           ;doprnt.c: 542: continue;
  1136  0047  282C               	goto	l1077
  1137  0048                     l1031:	
  1138                           
  1139                           ;doprnt.c: 543: }
  1140                           ;doprnt.c: 548: flag = 0;
  1141  0048  0020               	movlb	0	; select bank0
  1142  0049  01AF               	clrf	printf@flag
  1143                           
  1144                           ;doprnt.c: 635: switch(c = *f++) {
  1145  004A  2878               	goto	l1051
  1146  004B                     l1033:	
  1147                           ;doprnt.c: 728: case 's':
  1148                           
  1149                           ;doprnt.c: 638: goto alldone;
  1150                           
  1151                           ;doprnt.c: 637: case 0:
  1152                           
  1153                           
  1154                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  1155  004B  0833               	movf	printf@ap,w
  1156  004C  0086               	movwf	6
  1157  004D  0187               	clrf	7
  1158  004E  0801               	movf	1,w
  1159  004F  00B4               	movwf	printf@cp
  1160  0050  3000               	movlw	0
  1161  0051  00B5               	movwf	printf@cp+1
  1162  0052  3001               	movlw	1
  1163  0053  00AB               	movwf	??_printf
  1164  0054  082B               	movf	??_printf,w
  1165  0055  07B3               	addwf	printf@ap,f
  1166                           
  1167                           ;doprnt.c: 740: if(!cp)
  1168  0056  0834               	movf	printf@cp,w
  1169  0057  0435               	iorwf	printf@cp+1,w
  1170  0058  1D03               	btfss	3,2
  1171  0059  285E               	goto	l1045
  1172                           
  1173                           ;doprnt.c: 741: cp = "(null)";
  1174  005A  30FD               	movlw	low (STR_3| (0+32768))
  1175  005B  00B4               	movwf	printf@cp
  1176  005C  3081               	movlw	high (STR_3| (0+32768))
  1177  005D  00B5               	movwf	printf@cp+1
  1178  005E                     l1045:	
  1179                           ;doprnt.c: 777: while(*cp)
  1180                           
  1181  005E  0834               	movf	printf@cp,w
  1182  005F  0084               	movwf	4
  1183  0060  0835               	movf	printf@cp+1,w
  1184  0061  0085               	movwf	5
  1185  0062  0012               	moviw fsr0++
  1186  0063  1903               	btfsc	3,2
  1187  0064  282C               	goto	l1077
  1188                           
  1189                           ;doprnt.c: 778: (putch(*cp++) );
  1190  0065  0834               	movf	printf@cp,w
  1191  0066  0084               	movwf	4
  1192  0067  0835               	movf	printf@cp+1,w
  1193  0068  0085               	movwf	5
  1194  0069  0800               	movf	0,w	;code access
  1195  006A  3182  220A  3180   	fcall	_putch
  1196  006D  3001               	movlw	1
  1197  006E  0020               	movlb	0	; select bank0
  1198  006F  07B4               	addwf	printf@cp,f
  1199  0070  3000               	movlw	0
  1200  0071  3DB5               	addwfc	printf@cp+1,f
  1201  0072  285E               	goto	l1045
  1202  0073                     l1047:	
  1203                           ;doprnt.c: 817: case 'u':
  1204                           
  1205                           ;doprnt.c: 813: continue;
  1206                           
  1207                           ;doprnt.c: 802: default:
  1208                           
  1209                           ;doprnt.c: 779: continue;
  1210                           
  1211                           
  1212                           ;doprnt.c: 818: flag |= 0xC0;
  1213  0073  30C0               	movlw	192
  1214  0074  00AB               	movwf	??_printf
  1215  0075  082B               	movf	??_printf,w
  1216  0076  04AF               	iorwf	printf@flag,f
  1217                           
  1218                           ;doprnt.c: 822: }
  1219                           
  1220                           ;doprnt.c: 819: break;
  1221  0077  288F               	goto	l1053
  1222  0078                     l1051:	
  1223  0078  0827               	movf	printf@f+1,w
  1224  0079  00AC               	movwf	??_printf+1
  1225  007A  0826               	movf	printf@f,w
  1226  007B  00AB               	movwf	??_printf
  1227  007C  0AA6               	incf	printf@f,f
  1228  007D  1903               	skipnz
  1229  007E  0AA7               	incf	printf@f+1,f
  1230  007F  082B               	movf	??_printf,w
  1231  0080  0084               	movwf	4
  1232  0081  082C               	movf	??_printf+1,w
  1233  0082  0085               	movwf	5
  1234  0083  0800               	movf	0,w	;code access
  1235  0084  00B6               	movwf	printf@c
  1236                           
  1237                           ; Switch size 1, requested type "space"
  1238                           ; Number of cases is 3, Range of values is 0 to 117
  1239                           ; switch strategies available:
  1240                           ; Name         Instructions Cycles
  1241                           ; simple_byte           10     6 (average)
  1242                           ; direct_byte          242     6 (fixed)
  1243                           ; jumptable            260     6 (fixed)
  1244                           ;	Chosen strategy is simple_byte
  1245  0085  3A00               	xorlw	0	; case 0
  1246  0086  1903               	skipnz
  1247  0087  28F8               	goto	l187
  1248  0088  3A73               	xorlw	115	; case 115
  1249  0089  1903               	skipnz
  1250  008A  284B               	goto	l1033
  1251  008B  3A06               	xorlw	6	; case 117
  1252  008C  1903               	skipnz
  1253  008D  2873               	goto	l1047
  1254  008E  282C               	goto	l1077
  1255  008F                     l1053:	
  1256                           
  1257                           ;doprnt.c: 1273: {
  1258                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1259  008F  0833               	movf	printf@ap,w
  1260  0090  0086               	movwf	6
  1261  0091  0187               	clrf	7
  1262  0092  3F40               	moviw [0]fsr1
  1263  0093  00B0               	movwf	printf@val
  1264  0094  3F41               	moviw [1]fsr1
  1265  0095  00B1               	movwf	printf@val+1
  1266  0096  3002               	movlw	2
  1267  0097  00AB               	movwf	??_printf
  1268  0098  082B               	movf	??_printf,w
  1269  0099  07B3               	addwf	printf@ap,f
  1270                           
  1271                           ;doprnt.c: 1287: }
  1272                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1273  009A  01B6               	clrf	printf@c
  1274  009B  0AB6               	incf	printf@c,f
  1275  009C  3005               	movlw	5
  1276  009D  0636               	xorwf	printf@c,w
  1277  009E  1903               	btfsc	3,2
  1278  009F  28BF               	goto	l1069
  1279  00A0                     l1063:	
  1280                           
  1281                           ;doprnt.c: 1306: if(val < dpowers[c])
  1282  00A0  0836               	movf	printf@c,w
  1283  00A1  00AB               	movwf	??_printf
  1284  00A2  01AC               	clrf	??_printf+1
  1285  00A3  35AB               	lslf	??_printf,f
  1286  00A4  0DAC               	rlf	??_printf+1,f
  1287  00A5  307C               	movlw	low (_dpowers| (0+32768))
  1288  00A6  072B               	addwf	??_printf,w
  1289  00A7  0084               	movwf	4
  1290  00A8  3081               	movlw	high (_dpowers| (0+32768))
  1291  00A9  3D2C               	addwfc	??_printf+1,w
  1292  00AA  0085               	movwf	5
  1293  00AB  3F00               	moviw [0]fsr0
  1294  00AC  00AD               	movwf	??_printf+2
  1295  00AD  3F01               	moviw [1]fsr0
  1296  00AE  00AE               	movwf	??_printf+3
  1297  00AF  082E               	movf	??_printf+3,w
  1298  00B0  0231               	subwf	printf@val+1,w
  1299  00B1  1D03               	skipz
  1300  00B2  28B5               	goto	u755
  1301  00B3  082D               	movf	??_printf+2,w
  1302  00B4  0230               	subwf	printf@val,w
  1303  00B5                     u755:	
  1304  00B5  1C03               	btfss	3,0
  1305  00B6  28BF               	goto	l1069
  1306                           
  1307                           ;doprnt.c: 1307: break;
  1308  00B7  3001               	movlw	1
  1309  00B8  00AB               	movwf	??_printf
  1310  00B9  082B               	movf	??_printf,w
  1311  00BA  07B6               	addwf	printf@c,f
  1312  00BB  3005               	movlw	5
  1313  00BC  0636               	xorwf	printf@c,w
  1314  00BD  1D03               	btfss	3,2
  1315  00BE  28A0               	goto	l1063
  1316  00BF                     l1069:	
  1317                           
  1318                           ;doprnt.c: 1422: {
  1319                           ;doprnt.c: 1469: }
  1320                           ;doprnt.c: 1472: prec = c;
  1321  00BF  0836               	movf	printf@c,w
  1322  00C0  00AB               	movwf	??_printf
  1323  00C1  082B               	movf	??_printf,w
  1324  00C2  00B2               	movwf	printf@prec
  1325  00C3                     l1075:	
  1326                           ;doprnt.c: 1474: while(prec--) {
  1327                           
  1328  00C3  30FF               	movlw	255
  1329  00C4  0020               	movlb	0	; select bank0
  1330  00C5  00AB               	movwf	??_printf
  1331  00C6  082B               	movf	??_printf,w
  1332  00C7  07B2               	addwf	printf@prec,f
  1333  00C8  0A32               	incf	printf@prec,w
  1334  00C9  1903               	btfsc	3,2
  1335  00CA  282C               	goto	l1077
  1336                           
  1337                           ;doprnt.c: 1478: {
  1338                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1339  00CB  300A               	movlw	10
  1340  00CC  00A0               	movwf	___lwmod@divisor
  1341  00CD  3000               	movlw	0
  1342  00CE  00A1               	movwf	___lwmod@divisor+1
  1343  00CF  0832               	movf	printf@prec,w
  1344  00D0  00AB               	movwf	??_printf
  1345  00D1  01AC               	clrf	??_printf+1
  1346  00D2  35AB               	lslf	??_printf,f
  1347  00D3  0DAC               	rlf	??_printf+1,f
  1348  00D4  307C               	movlw	low (_dpowers| (0+32768))
  1349  00D5  072B               	addwf	??_printf,w
  1350  00D6  0084               	movwf	4
  1351  00D7  3081               	movlw	high (_dpowers| (0+32768))
  1352  00D8  3D2C               	addwfc	??_printf+1,w
  1353  00D9  0085               	movwf	5
  1354  00DA  3F00               	moviw [0]fsr0
  1355  00DB  00F2               	movwf	___lwdiv@divisor
  1356  00DC  3F01               	moviw [1]fsr0
  1357  00DD  00F3               	movwf	___lwdiv@divisor+1
  1358  00DE  0831               	movf	printf@val+1,w
  1359  00DF  00F5               	movwf	___lwdiv@dividend+1
  1360  00E0  0830               	movf	printf@val,w
  1361  00E1  00F4               	movwf	___lwdiv@dividend
  1362  00E2  3180  20F9  3180   	fcall	___lwdiv
  1363  00E5  0873               	movf	?___lwdiv+1,w
  1364  00E6  0020               	movlb	0	; select bank0
  1365  00E7  00A3               	movwf	___lwmod@dividend+1
  1366  00E8  0872               	movf	?___lwdiv,w
  1367  00E9  00A2               	movwf	___lwmod@dividend
  1368  00EA  3181  212D  3180   	fcall	___lwmod
  1369  00ED  0020               	movlb	0	; select bank0
  1370  00EE  0820               	movf	?___lwmod,w
  1371  00EF  3E30               	addlw	48
  1372  00F0  00AD               	movwf	??_printf+2
  1373  00F1  082D               	movf	??_printf+2,w
  1374  00F2  00B6               	movwf	printf@c
  1375                           
  1376                           ;doprnt.c: 1523: }
  1377                           ;doprnt.c: 1524: (putch(c) );
  1378  00F3  0836               	movf	printf@c,w
  1379  00F4  3182  220A  3180   	fcall	_putch
  1380  00F7  28C3               	goto	l1075
  1381  00F8                     l187:	
  1382                           ;doprnt.c: 1540: return 0;
  1383                           ;	Return value of _printf is never used
  1384                           
  1385                           ;doprnt.c: 1525: }
  1386                           ;doprnt.c: 1533: }
  1387                           ;doprnt.c: 1535: alldone:
  1388                           
  1389  00F8  0008               	return
  1390  00F9                     __end_of_printf:	
  1391                           
  1392                           	psect	text2
  1393  020A                     __ptext2:	
  1394 ;; *************** function _putch *****************
  1395 ;; Defined at:
  1396 ;;		line 133 in file "mcc_generated_files/eusart.c"
  1397 ;; Parameters:    Size  Location     Type
  1398 ;;  txData          1    wreg     unsigned char 
  1399 ;; Auto vars:     Size  Location     Type
  1400 ;;  txData          1    3[COMMON] unsigned char 
  1401 ;; Return value:  Size  Location     Type
  1402 ;;                  1    wreg      void 
  1403 ;; Registers used:
  1404 ;;		wreg, status,2, status,0, pclath, cstack
  1405 ;; Tracked objects:
  1406 ;;		On entry : 0/0
  1407 ;;		On exit  : 0/0
  1408 ;;		Unchanged: 0/0
  1409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1410 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1411 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1413 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1414 ;;Total ram usage:        1 bytes
  1415 ;; Hardware stack levels used:    1
  1416 ;; Hardware stack levels required when called:    3
  1417 ;; This function calls:
  1418 ;;		_EUSART_Write
  1419 ;; This function is called by:
  1420 ;;		_printf
  1421 ;; This function uses a non-reentrant model
  1422 ;;
  1423                           
  1424                           
  1425                           ;psect for function _putch
  1426  020A                     _putch:	
  1427                           
  1428                           ;incstack = 0
  1429                           ; Regs used in _putch: [wreg+status,2+status,0+pclath+cstack]
  1430                           ;putch@txData stored from wreg
  1431  020A  00F3               	movwf	putch@txData
  1432                           
  1433                           ;eusart.c: 135: EUSART_Write(txData);
  1434  020B  0873               	movf	putch@txData,w
  1435  020C  3181  21F5         	fcall	_EUSART_Write
  1436  020E  0008               	return
  1437  020F                     __end_of_putch:	
  1438                           
  1439                           	psect	text3
  1440  01F5                     __ptext3:	
  1441 ;; *************** function _EUSART_Write *****************
  1442 ;; Defined at:
  1443 ;;		line 119 in file "mcc_generated_files/eusart.c"
  1444 ;; Parameters:    Size  Location     Type
  1445 ;;  txData          1    wreg     unsigned char 
  1446 ;; Auto vars:     Size  Location     Type
  1447 ;;  txData          1    2[COMMON] unsigned char 
  1448 ;; Return value:  Size  Location     Type
  1449 ;;                  1    wreg      void 
  1450 ;; Registers used:
  1451 ;;		wreg
  1452 ;; Tracked objects:
  1453 ;;		On entry : 0/0
  1454 ;;		On exit  : 0/0
  1455 ;;		Unchanged: 0/0
  1456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1458 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1460 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1461 ;;Total ram usage:        1 bytes
  1462 ;; Hardware stack levels used:    1
  1463 ;; Hardware stack levels required when called:    2
  1464 ;; This function calls:
  1465 ;;		Nothing
  1466 ;; This function is called by:
  1467 ;;		_putch
  1468 ;; This function uses a non-reentrant model
  1469 ;;
  1470                           
  1471                           
  1472                           ;psect for function _EUSART_Write
  1473  01F5                     _EUSART_Write:	
  1474                           
  1475                           ;incstack = 0
  1476                           ; Regs used in _EUSART_Write: [wreg]
  1477                           ;EUSART_Write@txData stored from wreg
  1478  01F5  00F2               	movwf	EUSART_Write@txData
  1479  01F6                     l65:	
  1480                           ;eusart.c: 122: {
  1481                           
  1482                           ;eusart.c: 121: while(0 == PIR1bits.TXIF)
  1483                           
  1484  01F6  0020               	movlb	0	; select bank0
  1485  01F7  1E11               	btfss	17,4	;volatile
  1486  01F8  29F6               	goto	l65
  1487                           
  1488                           ;eusart.c: 123: }
  1489                           ;eusart.c: 125: TXREG = txData;
  1490  01F9  0872               	movf	EUSART_Write@txData,w
  1491  01FA  0023               	movlb	3	; select bank3
  1492  01FB  009A               	movwf	26	;volatile
  1493  01FC  0008               	return
  1494  01FD                     __end_of_EUSART_Write:	
  1495                           
  1496                           	psect	text4
  1497  012D                     __ptext4:	
  1498 ;; *************** function ___lwmod *****************
  1499 ;; Defined at:
  1500 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  1501 ;; Parameters:    Size  Location     Type
  1502 ;;  divisor         2    0[BANK0 ] unsigned int 
  1503 ;;  dividend        2    2[BANK0 ] unsigned int 
  1504 ;; Auto vars:     Size  Location     Type
  1505 ;;  counter         1    5[BANK0 ] unsigned char 
  1506 ;; Return value:  Size  Location     Type
  1507 ;;                  2    0[BANK0 ] unsigned int 
  1508 ;; Registers used:
  1509 ;;		wreg, status,2, status,0
  1510 ;; Tracked objects:
  1511 ;;		On entry : 0/0
  1512 ;;		On exit  : 0/0
  1513 ;;		Unchanged: 0/0
  1514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1515 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1516 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1517 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1518 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1519 ;;Total ram usage:        6 bytes
  1520 ;; Hardware stack levels used:    1
  1521 ;; Hardware stack levels required when called:    2
  1522 ;; This function calls:
  1523 ;;		Nothing
  1524 ;; This function is called by:
  1525 ;;		_printf
  1526 ;; This function uses a non-reentrant model
  1527 ;;
  1528                           
  1529                           
  1530                           ;psect for function ___lwmod
  1531  012D                     ___lwmod:	
  1532                           
  1533                           ;incstack = 0
  1534                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1535  012D  0020               	movlb	0	; select bank0
  1536  012E  0820               	movf	___lwmod@divisor,w
  1537  012F  0421               	iorwf	___lwmod@divisor+1,w
  1538  0130  1903               	btfsc	3,2
  1539  0131  2955               	goto	l1021
  1540  0132  01A5               	clrf	___lwmod@counter
  1541  0133  0AA5               	incf	___lwmod@counter,f
  1542  0134                     l1011:	
  1543  0134  1BA1               	btfsc	___lwmod@divisor+1,7
  1544  0135  2940               	goto	l1013
  1545  0136  3001               	movlw	1
  1546  0137                     u665:	
  1547  0137  35A0               	lslf	___lwmod@divisor,f
  1548  0138  0DA1               	rlf	___lwmod@divisor+1,f
  1549  0139  0B89               	decfsz	9,f
  1550  013A  2937               	goto	u665
  1551  013B  3001               	movlw	1
  1552  013C  00A4               	movwf	??___lwmod
  1553  013D  0824               	movf	??___lwmod,w
  1554  013E  07A5               	addwf	___lwmod@counter,f
  1555  013F  2934               	goto	l1011
  1556  0140                     l1013:	
  1557  0140  0821               	movf	___lwmod@divisor+1,w
  1558  0141  0223               	subwf	___lwmod@dividend+1,w
  1559  0142  1D03               	skipz
  1560  0143  2946               	goto	u685
  1561  0144  0820               	movf	___lwmod@divisor,w
  1562  0145  0222               	subwf	___lwmod@dividend,w
  1563  0146                     u685:	
  1564  0146  1C03               	skipc
  1565  0147  294C               	goto	l1017
  1566  0148  0820               	movf	___lwmod@divisor,w
  1567  0149  02A2               	subwf	___lwmod@dividend,f
  1568  014A  0821               	movf	___lwmod@divisor+1,w
  1569  014B  3BA3               	subwfb	___lwmod@dividend+1,f
  1570  014C                     l1017:	
  1571  014C  3001               	movlw	1
  1572  014D                     u695:	
  1573  014D  36A1               	lsrf	___lwmod@divisor+1,f
  1574  014E  0CA0               	rrf	___lwmod@divisor,f
  1575  014F  0B89               	decfsz	9,f
  1576  0150  294D               	goto	u695
  1577  0151  3001               	movlw	1
  1578  0152  02A5               	subwf	___lwmod@counter,f
  1579  0153  1D03               	btfss	3,2
  1580  0154  2940               	goto	l1013
  1581  0155                     l1021:	
  1582  0155  0823               	movf	___lwmod@dividend+1,w
  1583  0156  00A1               	movwf	?___lwmod+1
  1584  0157  0822               	movf	___lwmod@dividend,w
  1585  0158  00A0               	movwf	?___lwmod
  1586  0159  0008               	return
  1587  015A                     __end_of___lwmod:	
  1588                           
  1589                           	psect	text5
  1590  00F9                     __ptext5:	
  1591 ;; *************** function ___lwdiv *****************
  1592 ;; Defined at:
  1593 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  1594 ;; Parameters:    Size  Location     Type
  1595 ;;  divisor         2    2[COMMON] unsigned int 
  1596 ;;  dividend        2    4[COMMON] unsigned int 
  1597 ;; Auto vars:     Size  Location     Type
  1598 ;;  quotient        2    7[COMMON] unsigned int 
  1599 ;;  counter         1    9[COMMON] unsigned char 
  1600 ;; Return value:  Size  Location     Type
  1601 ;;                  2    2[COMMON] unsigned int 
  1602 ;; Registers used:
  1603 ;;		wreg, status,2, status,0
  1604 ;; Tracked objects:
  1605 ;;		On entry : 0/0
  1606 ;;		On exit  : 0/0
  1607 ;;		Unchanged: 0/0
  1608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1609 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1610 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1611 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1612 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1613 ;;Total ram usage:        8 bytes
  1614 ;; Hardware stack levels used:    1
  1615 ;; Hardware stack levels required when called:    2
  1616 ;; This function calls:
  1617 ;;		Nothing
  1618 ;; This function is called by:
  1619 ;;		_printf
  1620 ;; This function uses a non-reentrant model
  1621 ;;
  1622                           
  1623                           
  1624                           ;psect for function ___lwdiv
  1625  00F9                     ___lwdiv:	
  1626                           
  1627                           ;incstack = 0
  1628                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1629  00F9  01F7               	clrf	___lwdiv@quotient
  1630  00FA  01F8               	clrf	___lwdiv@quotient+1
  1631  00FB  0872               	movf	___lwdiv@divisor,w
  1632  00FC  0473               	iorwf	___lwdiv@divisor+1,w
  1633  00FD  1903               	btfsc	3,2
  1634  00FE  2928               	goto	l849
  1635  00FF  01F9               	clrf	___lwdiv@counter
  1636  0100  0AF9               	incf	___lwdiv@counter,f
  1637  0101                     l837:	
  1638  0101  1BF3               	btfsc	___lwdiv@divisor+1,7
  1639  0102  290D               	goto	l839
  1640  0103  3001               	movlw	1
  1641  0104                     u365:	
  1642  0104  35F2               	lslf	___lwdiv@divisor,f
  1643  0105  0DF3               	rlf	___lwdiv@divisor+1,f
  1644  0106  0B89               	decfsz	9,f
  1645  0107  2904               	goto	u365
  1646  0108  3001               	movlw	1
  1647  0109  00F6               	movwf	??___lwdiv
  1648  010A  0876               	movf	??___lwdiv,w
  1649  010B  07F9               	addwf	___lwdiv@counter,f
  1650  010C  2901               	goto	l837
  1651  010D                     l839:	
  1652  010D  3001               	movlw	1
  1653  010E                     u385:	
  1654  010E  35F7               	lslf	___lwdiv@quotient,f
  1655  010F  0DF8               	rlf	___lwdiv@quotient+1,f
  1656  0110  0B89               	decfsz	9,f
  1657  0111  290E               	goto	u385
  1658  0112  0873               	movf	___lwdiv@divisor+1,w
  1659  0113  0275               	subwf	___lwdiv@dividend+1,w
  1660  0114  1D03               	skipz
  1661  0115  2918               	goto	u395
  1662  0116  0872               	movf	___lwdiv@divisor,w
  1663  0117  0274               	subwf	___lwdiv@dividend,w
  1664  0118                     u395:	
  1665  0118  1C03               	skipc
  1666  0119  291F               	goto	l845
  1667  011A  0872               	movf	___lwdiv@divisor,w
  1668  011B  02F4               	subwf	___lwdiv@dividend,f
  1669  011C  0873               	movf	___lwdiv@divisor+1,w
  1670  011D  3BF5               	subwfb	___lwdiv@dividend+1,f
  1671  011E  1477               	bsf	___lwdiv@quotient,0
  1672  011F                     l845:	
  1673  011F  3001               	movlw	1
  1674  0120                     u405:	
  1675  0120  36F3               	lsrf	___lwdiv@divisor+1,f
  1676  0121  0CF2               	rrf	___lwdiv@divisor,f
  1677  0122  0B89               	decfsz	9,f
  1678  0123  2920               	goto	u405
  1679  0124  3001               	movlw	1
  1680  0125  02F9               	subwf	___lwdiv@counter,f
  1681  0126  1D03               	btfss	3,2
  1682  0127  290D               	goto	l839
  1683  0128                     l849:	
  1684  0128  0878               	movf	___lwdiv@quotient+1,w
  1685  0129  00F3               	movwf	?___lwdiv+1
  1686  012A  0877               	movf	___lwdiv@quotient,w
  1687  012B  00F2               	movwf	?___lwdiv
  1688  012C  0008               	return
  1689  012D                     __end_of___lwdiv:	
  1690                           
  1691                           	psect	text6
  1692  01DD                     __ptext6:	
  1693 ;; *************** function _SYSTEM_Initialize *****************
  1694 ;; Defined at:
  1695 ;;		line 73 in file "mcc_generated_files/mcc.c"
  1696 ;; Parameters:    Size  Location     Type
  1697 ;;		None
  1698 ;; Auto vars:     Size  Location     Type
  1699 ;;		None
  1700 ;; Return value:  Size  Location     Type
  1701 ;;                  1    wreg      void 
  1702 ;; Registers used:
  1703 ;;		wreg, status,2, status,0, pclath, cstack
  1704 ;; Tracked objects:
  1705 ;;		On entry : 0/0
  1706 ;;		On exit  : 0/0
  1707 ;;		Unchanged: 0/0
  1708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1709 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1710 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1712 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1713 ;;Total ram usage:        0 bytes
  1714 ;; Hardware stack levels used:    1
  1715 ;; Hardware stack levels required when called:    3
  1716 ;; This function calls:
  1717 ;;		_EUSART_Initialize
  1718 ;;		_OSCILLATOR_Initialize
  1719 ;;		_PIN_MANAGER_Initialize
  1720 ;;		_WDT_Initialize
  1721 ;; This function is called by:
  1722 ;;		_main
  1723 ;; This function uses a non-reentrant model
  1724 ;;
  1725                           
  1726                           
  1727                           ;psect for function _SYSTEM_Initialize
  1728  01DD                     _SYSTEM_Initialize:	
  1729                           
  1730                           ;mcc.c: 76: PIN_MANAGER_Initialize();
  1731                           
  1732                           ;incstack = 0
  1733                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  1734  01DD  3181  21B6  3181   	fcall	_PIN_MANAGER_Initialize
  1735                           
  1736                           ;mcc.c: 77: OSCILLATOR_Initialize();
  1737  01E0  3181  21E9  3181   	fcall	_OSCILLATOR_Initialize
  1738                           
  1739                           ;mcc.c: 78: WDT_Initialize();
  1740  01E3  3182  220F  3181   	fcall	_WDT_Initialize
  1741                           
  1742                           ;mcc.c: 79: EUSART_Initialize();
  1743  01E6  3181  21CA         	fcall	_EUSART_Initialize
  1744  01E8  0008               	return
  1745  01E9                     __end_of_SYSTEM_Initialize:	
  1746                           
  1747                           	psect	text7
  1748  020F                     __ptext7:	
  1749 ;; *************** function _WDT_Initialize *****************
  1750 ;; Defined at:
  1751 ;;		line 98 in file "mcc_generated_files/mcc.c"
  1752 ;; Parameters:    Size  Location     Type
  1753 ;;		None
  1754 ;; Auto vars:     Size  Location     Type
  1755 ;;		None
  1756 ;; Return value:  Size  Location     Type
  1757 ;;                  1    wreg      void 
  1758 ;; Registers used:
  1759 ;;		wreg
  1760 ;; Tracked objects:
  1761 ;;		On entry : 0/0
  1762 ;;		On exit  : 0/0
  1763 ;;		Unchanged: 0/0
  1764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1766 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1768 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1769 ;;Total ram usage:        0 bytes
  1770 ;; Hardware stack levels used:    1
  1771 ;; Hardware stack levels required when called:    2
  1772 ;; This function calls:
  1773 ;;		Nothing
  1774 ;; This function is called by:
  1775 ;;		_SYSTEM_Initialize
  1776 ;; This function uses a non-reentrant model
  1777 ;;
  1778                           
  1779                           
  1780                           ;psect for function _WDT_Initialize
  1781  020F                     _WDT_Initialize:	
  1782                           
  1783                           ;mcc.c: 101: WDTCON = 0x16;
  1784                           
  1785                           ;incstack = 0
  1786                           ; Regs used in _WDT_Initialize: [wreg]
  1787  020F  3016               	movlw	22
  1788  0210  0021               	movlb	1	; select bank1
  1789  0211  0097               	movwf	23	;volatile
  1790  0212  0008               	return
  1791  0213                     __end_of_WDT_Initialize:	
  1792                           
  1793                           	psect	text8
  1794  01B6                     __ptext8:	
  1795 ;; *************** function _PIN_MANAGER_Initialize *****************
  1796 ;; Defined at:
  1797 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  1798 ;; Parameters:    Size  Location     Type
  1799 ;;		None
  1800 ;; Auto vars:     Size  Location     Type
  1801 ;;		None
  1802 ;; Return value:  Size  Location     Type
  1803 ;;                  1    wreg      void 
  1804 ;; Registers used:
  1805 ;;		wreg, status,2
  1806 ;; Tracked objects:
  1807 ;;		On entry : 0/0
  1808 ;;		On exit  : 0/0
  1809 ;;		Unchanged: 0/0
  1810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1812 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1813 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1814 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1815 ;;Total ram usage:        0 bytes
  1816 ;; Hardware stack levels used:    1
  1817 ;; Hardware stack levels required when called:    2
  1818 ;; This function calls:
  1819 ;;		Nothing
  1820 ;; This function is called by:
  1821 ;;		_SYSTEM_Initialize
  1822 ;; This function uses a non-reentrant model
  1823 ;;
  1824                           
  1825                           
  1826                           ;psect for function _PIN_MANAGER_Initialize
  1827  01B6                     _PIN_MANAGER_Initialize:	
  1828                           
  1829                           ;pin_manager.c: 57: LATA = 0x00;
  1830                           
  1831                           ;incstack = 0
  1832                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  1833  01B6  0022               	movlb	2	; select bank2
  1834  01B7  018C               	clrf	12	;volatile
  1835                           
  1836                           ;pin_manager.c: 58: LATC = 0x00;
  1837  01B8  018E               	clrf	14	;volatile
  1838                           
  1839                           ;pin_manager.c: 63: TRISA = 0x30;
  1840  01B9  3030               	movlw	48
  1841  01BA  0021               	movlb	1	; select bank1
  1842  01BB  008C               	movwf	12	;volatile
  1843                           
  1844                           ;pin_manager.c: 64: TRISC = 0x27;
  1845  01BC  3027               	movlw	39
  1846  01BD  008E               	movwf	14	;volatile
  1847                           
  1848                           ;pin_manager.c: 69: ANSELC = 0x0F;
  1849  01BE  300F               	movlw	15
  1850  01BF  0023               	movlb	3	; select bank3
  1851  01C0  008E               	movwf	14	;volatile
  1852                           
  1853                           ;pin_manager.c: 70: ANSELA = 0x10;
  1854  01C1  3010               	movlw	16
  1855  01C2  008C               	movwf	12	;volatile
  1856                           
  1857                           ;pin_manager.c: 75: WPUA = 0x00;
  1858  01C3  0024               	movlb	4	; select bank4
  1859  01C4  018C               	clrf	12	;volatile
  1860                           
  1861                           ;pin_manager.c: 76: OPTION_REGbits.nWPUEN = 1;
  1862  01C5  0021               	movlb	1	; select bank1
  1863  01C6  1795               	bsf	21,7	;volatile
  1864                           
  1865                           ;pin_manager.c: 82: APFCON = 0x00;
  1866  01C7  0022               	movlb	2	; select bank2
  1867  01C8  019D               	clrf	29	;volatile
  1868  01C9  0008               	return
  1869  01CA                     __end_of_PIN_MANAGER_Initialize:	
  1870                           
  1871                           	psect	text9
  1872  01E9                     __ptext9:	
  1873 ;; *************** function _OSCILLATOR_Initialize *****************
  1874 ;; Defined at:
  1875 ;;		line 82 in file "mcc_generated_files/mcc.c"
  1876 ;; Parameters:    Size  Location     Type
  1877 ;;		None
  1878 ;; Auto vars:     Size  Location     Type
  1879 ;;		None
  1880 ;; Return value:  Size  Location     Type
  1881 ;;                  1    wreg      void 
  1882 ;; Registers used:
  1883 ;;		wreg, status,2
  1884 ;; Tracked objects:
  1885 ;;		On entry : 0/0
  1886 ;;		On exit  : 0/0
  1887 ;;		Unchanged: 0/0
  1888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1890 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1892 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1893 ;;Total ram usage:        0 bytes
  1894 ;; Hardware stack levels used:    1
  1895 ;; Hardware stack levels required when called:    2
  1896 ;; This function calls:
  1897 ;;		Nothing
  1898 ;; This function is called by:
  1899 ;;		_SYSTEM_Initialize
  1900 ;; This function uses a non-reentrant model
  1901 ;;
  1902                           
  1903                           
  1904                           ;psect for function _OSCILLATOR_Initialize
  1905  01E9                     _OSCILLATOR_Initialize:	
  1906                           
  1907                           ;mcc.c: 85: OSCCON = 0x7C;
  1908                           
  1909                           ;incstack = 0
  1910                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  1911  01E9  307C               	movlw	124
  1912  01EA  0021               	movlb	1	; select bank1
  1913  01EB  0099               	movwf	25	;volatile
  1914                           
  1915                           ;mcc.c: 87: OSCTUNE = 0x00;
  1916  01EC  0198               	clrf	24	;volatile
  1917                           
  1918                           ;mcc.c: 89: ACTCON = 0x00;
  1919  01ED  0027               	movlb	7	; select bank7
  1920  01EE  019B               	clrf	27	;volatile
  1921                           
  1922                           ;mcc.c: 91: BORCON = 0x00;
  1923  01EF  0022               	movlb	2	; select bank2
  1924  01F0  0196               	clrf	22	;volatile
  1925  01F1                     l105:	
  1926                           ;mcc.c: 94: {
  1927                           
  1928                           ;mcc.c: 93: while(PLLRDY == 0)
  1929                           
  1930  01F1  0021               	movlb	1	; select bank1
  1931  01F2  1B1A               	btfsc	26,6	;volatile
  1932  01F3  0008               	return
  1933  01F4  29F1               	goto	l105
  1934  01F5                     __end_of_OSCILLATOR_Initialize:	
  1935                           
  1936                           	psect	text10
  1937  01CA                     __ptext10:	
  1938 ;; *************** function _EUSART_Initialize *****************
  1939 ;; Defined at:
  1940 ;;		line 68 in file "mcc_generated_files/eusart.c"
  1941 ;; Parameters:    Size  Location     Type
  1942 ;;		None
  1943 ;; Auto vars:     Size  Location     Type
  1944 ;;		None
  1945 ;; Return value:  Size  Location     Type
  1946 ;;                  1    wreg      void 
  1947 ;; Registers used:
  1948 ;;		wreg, status,2
  1949 ;; Tracked objects:
  1950 ;;		On entry : 0/0
  1951 ;;		On exit  : 0/0
  1952 ;;		Unchanged: 0/0
  1953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1955 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1957 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1958 ;;Total ram usage:        0 bytes
  1959 ;; Hardware stack levels used:    1
  1960 ;; Hardware stack levels required when called:    2
  1961 ;; This function calls:
  1962 ;;		Nothing
  1963 ;; This function is called by:
  1964 ;;		_SYSTEM_Initialize
  1965 ;; This function uses a non-reentrant model
  1966 ;;
  1967                           
  1968                           
  1969                           ;psect for function _EUSART_Initialize
  1970  01CA                     _EUSART_Initialize:	
  1971                           
  1972                           ;eusart.c: 71: PIE1bits.RCIE = 0;
  1973                           
  1974                           ;incstack = 0
  1975                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  1976  01CA  0021               	movlb	1	; select bank1
  1977  01CB  1291               	bcf	17,5	;volatile
  1978                           
  1979                           ;eusart.c: 75: BAUDCON = 0x08;
  1980  01CC  3008               	movlw	8
  1981  01CD  0023               	movlb	3	; select bank3
  1982  01CE  009F               	movwf	31	;volatile
  1983                           
  1984                           ;eusart.c: 78: RCSTA = 0x90;
  1985  01CF  3090               	movlw	144
  1986  01D0  009D               	movwf	29	;volatile
  1987                           
  1988                           ;eusart.c: 81: TXSTA = 0x24;
  1989  01D1  3024               	movlw	36
  1990  01D2  009E               	movwf	30	;volatile
  1991                           
  1992                           ;eusart.c: 84: SPBRGL = 0xCF;
  1993  01D3  30CF               	movlw	207
  1994  01D4  009B               	movwf	27	;volatile
  1995                           
  1996                           ;eusart.c: 87: SPBRGH = 0x00;
  1997  01D5  019C               	clrf	28	;volatile
  1998                           
  1999                           ;eusart.c: 91: eusartRxHead = 0;
  2000  01D6  01FB               	clrf	_eusartRxHead	;volatile
  2001                           
  2002                           ;eusart.c: 92: eusartRxTail = 0;
  2003  01D7  01FA               	clrf	_eusartRxTail	;volatile
  2004                           
  2005                           ;eusart.c: 93: eusartRxCount = 0;
  2006  01D8  0020               	movlb	0	; select bank0
  2007  01D9  01C9               	clrf	_eusartRxCount	;volatile
  2008                           
  2009                           ;eusart.c: 96: PIE1bits.RCIE = 1;
  2010  01DA  0021               	movlb	1	; select bank1
  2011  01DB  1691               	bsf	17,5	;volatile
  2012  01DC  0008               	return
  2013  01DD                     __end_of_EUSART_Initialize:	
  2014                           
  2015                           	psect	intentry
  2016  0004                     __pintentry:	
  2017 ;; *************** function _INTERRUPT_InterruptManager *****************
  2018 ;; Defined at:
  2019 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  2020 ;; Parameters:    Size  Location     Type
  2021 ;;		None
  2022 ;; Auto vars:     Size  Location     Type
  2023 ;;		None
  2024 ;; Return value:  Size  Location     Type
  2025 ;;                  1    wreg      void 
  2026 ;; Registers used:
  2027 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2028 ;; Tracked objects:
  2029 ;;		On entry : 0/0
  2030 ;;		On exit  : 0/0
  2031 ;;		Unchanged: 0/0
  2032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2034 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2035 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2036 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2037 ;;Total ram usage:        1 bytes
  2038 ;; Hardware stack levels used:    1
  2039 ;; Hardware stack levels required when called:    1
  2040 ;; This function calls:
  2041 ;;		_EUSART_Receive_ISR
  2042 ;; This function is called by:
  2043 ;;		Interrupt level 1
  2044 ;; This function uses a non-reentrant model
  2045 ;;
  2046                           
  2047  0004                     _INTERRUPT_InterruptManager:	
  2048                           
  2049                           ;incstack = 0
  2050  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  2051                           
  2052                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  2053  0005  3180               	pagesel	$
  2054  0006  0020               	movlb	0	; select bank0
  2055  0007  087F               	movf	127,w
  2056  0008  00F1               	movwf	??_INTERRUPT_InterruptManager
  2057                           
  2058                           ;interrupt_manager.c: 54: if(INTCONbits.PEIE == 1)
  2059  0009  1F0B               	btfss	11,6	;volatile
  2060  000A  2813               	goto	i1l155
  2061                           
  2062                           ;interrupt_manager.c: 55: {
  2063                           ;interrupt_manager.c: 56: if(PIE1bits.RCIE == 1 && PIR1bits.RCIF == 1)
  2064  000B  0021               	movlb	1	; select bank1
  2065  000C  1E91               	btfss	17,5	;volatile
  2066  000D  2813               	goto	i1l155
  2067  000E  0020               	movlb	0	; select bank0
  2068  000F  1E91               	btfss	17,5	;volatile
  2069  0010  2813               	goto	i1l155
  2070                           
  2071                           ;interrupt_manager.c: 57: {
  2072                           ;interrupt_manager.c: 58: EUSART_Receive_ISR();
  2073  0011  3181  219B         	fcall	_EUSART_Receive_ISR
  2074  0013                     i1l155:	
  2075                           ;interrupt_manager.c: 65: else
  2076                           ;interrupt_manager.c: 66: {
  2077                           
  2078                           ;interrupt_manager.c: 63: }
  2079                           ;interrupt_manager.c: 64: }
  2080                           
  2081                           ;interrupt_manager.c: 60: else
  2082                           ;interrupt_manager.c: 61: {
  2083                           
  2084                           ;interrupt_manager.c: 59: }
  2085                           
  2086  0013  0871               	movf	??_INTERRUPT_InterruptManager,w
  2087  0014  0020               	movlb	0	; select bank0
  2088  0015  00FF               	movwf	127
  2089  0016  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  2090  0017  0009               	retfie
  2091  0018                     __end_of_INTERRUPT_InterruptManager:	
  2092                           
  2093                           	psect	text12
  2094  019B                     __ptext12:	
  2095 ;; *************** function _EUSART_Receive_ISR *****************
  2096 ;; Defined at:
  2097 ;;		line 139 in file "mcc_generated_files/eusart.c"
  2098 ;; Parameters:    Size  Location     Type
  2099 ;;		None
  2100 ;; Auto vars:     Size  Location     Type
  2101 ;;		None
  2102 ;; Return value:  Size  Location     Type
  2103 ;;                  1    wreg      void 
  2104 ;; Registers used:
  2105 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2106 ;; Tracked objects:
  2107 ;;		On entry : 0/0
  2108 ;;		On exit  : 0/0
  2109 ;;		Unchanged: 0/0
  2110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2111 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2112 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2113 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2114 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2115 ;;Total ram usage:        1 bytes
  2116 ;; Hardware stack levels used:    1
  2117 ;; This function calls:
  2118 ;;		Nothing
  2119 ;; This function is called by:
  2120 ;;		_INTERRUPT_InterruptManager
  2121 ;; This function uses a non-reentrant model
  2122 ;;
  2123                           
  2124                           
  2125                           ;psect for function _EUSART_Receive_ISR
  2126  019B                     _EUSART_Receive_ISR:	
  2127                           
  2128                           ;eusart.c: 142: if(1 == RCSTAbits.OERR)
  2129                           
  2130                           ;incstack = 0
  2131                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  2132  019B  0023               	movlb	3	; select bank3
  2133  019C  1C9D               	btfss	29,1	;volatile
  2134  019D  29A0               	goto	i1l901
  2135                           
  2136                           ;eusart.c: 143: {
  2137                           ;eusart.c: 146: RCSTAbits.CREN = 0;
  2138  019E  121D               	bcf	29,4	;volatile
  2139                           
  2140                           ;eusart.c: 147: RCSTAbits.CREN = 1;
  2141  019F  161D               	bsf	29,4	;volatile
  2142  01A0                     i1l901:	
  2143                           
  2144                           ;eusart.c: 148: }
  2145                           ;eusart.c: 151: eusartRxBuffer[eusartRxHead++] = RCREG;
  2146  01A0  0819               	movf	25,w	;volatile
  2147  01A1  00F0               	movwf	??_EUSART_Receive_ISR
  2148  01A2  087B               	movf	_eusartRxHead,w
  2149  01A3  3E39               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  2150  01A4  0086               	movwf	6
  2151  01A5  0187               	clrf	7
  2152  01A6  0870               	movf	??_EUSART_Receive_ISR,w
  2153  01A7  0081               	movwf	1
  2154  01A8  3001               	movlw	1
  2155  01A9  00F0               	movwf	??_EUSART_Receive_ISR
  2156  01AA  0870               	movf	??_EUSART_Receive_ISR,w
  2157  01AB  07FB               	addwf	_eusartRxHead,f	;volatile
  2158                           
  2159                           ;eusart.c: 152: if(sizeof(eusartRxBuffer) <= eusartRxHead)
  2160  01AC  3010               	movlw	16
  2161  01AD  027B               	subwf	_eusartRxHead,w	;volatile
  2162  01AE  1803               	btfsc	3,0
  2163                           
  2164                           ;eusart.c: 153: {
  2165                           ;eusart.c: 154: eusartRxHead = 0;
  2166  01AF  01FB               	clrf	_eusartRxHead	;volatile
  2167                           
  2168                           ;eusart.c: 155: }
  2169                           ;eusart.c: 156: eusartRxCount++;
  2170  01B0  3001               	movlw	1
  2171  01B1  00F0               	movwf	??_EUSART_Receive_ISR
  2172  01B2  0870               	movf	??_EUSART_Receive_ISR,w
  2173  01B3  0020               	movlb	0	; select bank0
  2174  01B4  07C9               	addwf	_eusartRxCount,f	;volatile
  2175  01B5  0008               	return
  2176  01B6                     __end_of_EUSART_Receive_ISR:	
  2177  007E                     btemp	set	126	;btemp
  2178  007E                     int$flags	set	126
  2179  007E                     wtemp0	set	126


Data Sizes:
    Strings     31
    Constant    10
    Data        0
    BSS         19
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     25      42
    BANK1            80      0       0
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_2(CODE[3]), STR_1(CODE[21]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_3(CODE[7]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 


Critical Paths under _main in COMMON

    _printf->___lwdiv
    _putch->_EUSART_Write
    ___lwmod->___lwdiv

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_EUSART_Receive_ISR

Critical Paths under _main in BANK0

    _main->_printf
    _printf->___lwmod

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                18    18      0    1407
                                             23 BANK0      2     2      0
                  _SYSTEM_Initialize
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              23    18      5    1407
                                              6 BANK0     17    12      5
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      44
                                              3 COMMON     1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART_Write                                         1     1      0      22
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     362
                                              0 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     268
                                              2 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                           1     1      0       0
                                              1 COMMON     1     1      0
                 _EUSART_Receive_ISR
 ---------------------------------------------------------------------------------
 (5) _EUSART_Receive_ISR                                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _EUSART_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _WDT_Initialize
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _EUSART_Write

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART_Receive_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     19      2A       5       52.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      36      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      36      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Mar 18 23:55:15 2018

                        __CFG_CP$OFF 0000                                   l65 01F6  
                        __CFG_LVP$ON 0000                                  l105 01F1  
                                l187 00F8                                  l845 011F  
                                l837 0101                                  l839 010D  
                                l849 0128                                  u405 0120  
                                u365 0104                                  u385 010E  
                                u395 0118                                  u665 0137  
                                u817 0174                                  u755 00B5  
                                u685 0146                                  u695 014D  
                       __CFG_BORV$LO 0000                                  wreg 0009  
                       __CFG_IESO$ON 0000                                 l1011 0134  
                               l1013 0140                                 l1021 0155  
                               l1031 0048                                 l1017 014C  
                               l1033 004B                                 l1051 0078  
                               l1053 008F                                 l1045 005E  
                               l1063 00A0                                 l1047 0073  
                               l1075 00C3                                 l1069 00BF  
                               l1077 002C                                 l1099 015F  
                               STR_1 0186                                 STR_2 0213  
                               STR_3 01FD                                 _LATA 010C  
                               _LATC 010E                                 _WPUA 020C  
                       __CFG_WRT$OFF 0000                        __CFG_FCMEN$ON 0000  
                               _main 015A                                 fsr0h 0005  
                               fsr1h 0007                                 indf0 0000  
                               fsr0l 0004                                 indf1 0001  
                               fsr1l 0006                                 btemp 007E  
                      __CFG_BOREN$ON 0000                                 start 0018  
                      __CFG_MCLRE$ON 0000                        ?_EUSART_Write 0070  
     __size_of_OSCILLATOR_Initialize 000C        __end_of_OSCILLATOR_Initialize 01F5  
                              ?_main 0070                        __CFG_WDTE$OFF 0000  
                    __end_of___lwdiv 012D                                i1l155 0013  
                    __end_of___lwmod 015A                                i1l901 01A0  
                              _RCREG 0199                                _RCSTA 019D  
                              _TRISA 008C                                _TRISC 008E  
                              _TXREG 019A                                _TXSTA 019E  
                    __end_of_dpowers 0186                       _WDT_Initialize 020F  
                              _putch 020A                                status 0003  
                              wtemp0 007E                      __initialization 001A  
                       __end_of_main 017C                       ??_EUSART_Write 0072  
                     __CFG_LPBOR$OFF 0000          ?_INTERRUPT_InterruptManager 0070  
                             ??_main 0037                  __CFG_USBLSCLK$48MHz 0000  
             __end_of_WDT_Initialize 0213                               _ACTCON 039B  
                             _APFCON 011D                               _ANSELA 018C  
                             ?_putch 0070                               _ANSELC 018E  
                             _BORCON 0116                               _OSCCON 0099  
                             _PLLRDY 04D6                               _SPBRGH 019C  
                             _SPBRGL 019B                               _WDTCON 0097  
                     __CFG_PWRTE$OFF 0000                       __CFG_STVREN$ON 0000  
                          ??___lwdiv 0076                            ??___lwmod 0024  
                             _printf 0027                      ?_WDT_Initialize 0070  
                  _SYSTEM_Initialize 01DD              __end_of__initialization 0023  
                 ?_SYSTEM_Initialize 0070                       __pcstackCOMMON 0070  
                ??_SYSTEM_Initialize 0072                        __end_of_putch 020F  
                     _OPTION_REGbits 0095            __end_of_SYSTEM_Initialize 01E9  
                            ??_putch 0073                           __pbssBANK0 0039  
               __end_of_EUSART_Write 01FD          __size_of_EUSART_Receive_ISR 001B  
                         __pmaintext 015A                      __CFG_PLLMULT$3x 0000  
                         __pintentry 0004                              _BAUDCON 019F  
                            ?_printf 0026                        _eusartRxCount 0049  
                            _OSCTUNE 0098                              ___lwdiv 00F9  
                            ___lwmod 012D                              __ptext1 0027  
                            __ptext2 020A                              __ptext3 01F5  
                            __ptext4 012D                              __ptext5 00F9  
                            __ptext6 01DD                              __ptext7 020F  
                            __ptext8 01B6                              __ptext9 01E9  
                    __size_of_printf 00D2                              _dpowers 017C  
              _OSCILLATOR_Initialize 01E9             ??_PIN_MANAGER_Initialize 0072  
         __size_of_SYSTEM_Initialize 000C                              clrloop0 0205  
               end_of_initialization 0023                    _EUSART_Initialize 01CA  
                 ?_EUSART_Initialize 0070                            _RCSTAbits 019D  
                            printf@c 0036                              printf@f 0026  
                ??_EUSART_Initialize 0072                     ??_WDT_Initialize 0072  
                   __CFG_FOSC$INTOSC 0000                __size_of_EUSART_Write 0008  
          __end_of_EUSART_Initialize 01DD                   __CFG_PLLEN$ENABLED 0000  
                       _EUSART_Write 01F5               ?_OSCILLATOR_Initialize 0070  
                     __end_of_printf 00F9                  start_initialization 001A  
    __size_of_PIN_MANAGER_Initialize 0014                          putch@txData 0073  
                           ??_printf 002B                          __pbssCOMMON 007A  
                          ___latbits 0002                        __pcstackBANK0 0020  
         __end_of_EUSART_Receive_ISR 01B6           __size_of_EUSART_Initialize 0013  
                   ___lwdiv@dividend 0074               _PIN_MANAGER_Initialize 01B6  
                           ?___lwdiv 0072                             ?___lwmod 0020  
                       _eusartRxHead 007B                         _eusartRxTail 007A  
       ??_INTERRUPT_InterruptManager 0071                     ___lwdiv@quotient 0077  
                     __size_of_putch 0005                       _eusartRxBuffer 0039  
                          clear_ram0 0204                             _PIE1bits 0091  
__size_of_INTERRUPT_InterruptManager 0014                             _PIR1bits 0011  
                         printf@flag 002F                           printf@prec 0032  
            ??_OSCILLATOR_Initialize 0072                     __size_of___lwdiv 0034  
                   __size_of___lwmod 002D                      ___lwdiv@divisor 0072  
                    ___lwdiv@counter 0079                             __ptext10 01CA  
                           __ptext12 019B                        __size_of_main 0022  
                           int$flags 007E   __end_of_INTERRUPT_InterruptManager 0018  
         _INTERRUPT_InterruptManager 0004                            printf@val 0030  
                         _INTCONbits 000B              __size_of_WDT_Initialize 0004  
                           intlevel1 0000                     ___lwmod@dividend 0022  
            ?_PIN_MANAGER_Initialize 0070                    __CFG_CLKOUTEN$OFF 0000  
                           printf@ap 0033                             printf@cp 0034  
                 _EUSART_Receive_ISR 019B                        __pstringtext1 017C  
                      __pstringtext2 01FD                        __pstringtext3 0213  
                      __pstringtext4 0000                  ?_EUSART_Receive_ISR 0070  
                __CFG_CPUDIV$CLKDIV6 0000                      ___lwmod@divisor 0020  
                    ___lwmod@counter 0025                   EUSART_Write@txData 0072  
     __end_of_PIN_MANAGER_Initialize 01CA                 ??_EUSART_Receive_ISR 0070  
